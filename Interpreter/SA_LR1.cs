using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Collections;
namespace Interpreter
{
    class SA_LR1
    {
        public struct toStack
        {
            public string sign;
            public int state;
        }
        int[,] LRTable =
{
{   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   },
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	3,	0,	6,	0,	0,	0,	0,	0,	0,	0,	12,	14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	4,	0,	0,	9,	0,	0,	0,	0,	0,	0,	0,	19,	22,	0,	27,	0,	0,	0,	34,	36,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	101	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	7,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	8,	0,	6,	0,	0,	0,	0,	0,	0,	0,	12,	14,	102,	102,	0,	102,	0,	0,	0,	102,	102,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	103,	103,	0,	103,	0,	0,	0,	103,	103,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	104,	0,	0,	0,	0,	0,	0,	0,	0,	104,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	11,	0,	0,	9,	0,	0,	0,	0,	104,	0,	0,	19,	22,	0,	27,	0,	104,	104,	34,	36,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	105,	0,	0,	0,	0,	0,	0,	0,	105,	105,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	13,	0,	0,	0,	0,	0,	0,	0,	0,	16,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	106,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	15,	0,	0,	0,	0,	0,	0,	0,	0,	16,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	107,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	108,	17,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	18,	0,	0,	0,	0,	0,	0,	0,	0,	16,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	109,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	20,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	21,	38,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	39,	41,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	110,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	23,	38,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	39,	41,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	24,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	25,	0,	0,	9,	0,	0,	0,	0,	0,	0,	0,	19,	22,	0,	27,	0,	0,	0,	34,	36,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	26,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	111,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	111,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	28,	38,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	39,	41,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	29,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	30,	0,	0,	9,	0,	0,	0,	0,	0,	0,	0,	19,	22,	0,	27,	0,	0,	0,	34,	36,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	31,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	32,	0,	0,	9,	0,	0,	0,	0,	0,	0,	0,	19,	22,	0,	27,	0,	0,	0,	34,	36,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	33,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	112,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	112,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	35,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	113,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	37,	38,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	39,	41,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	114,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	115,	0,	115,	0,	0,	0,	0,	0,	115,	0,	0,	115,	115,	46,	48,	0,	115,	115,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	40,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	0,	0,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	116,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	42,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	0,	0,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	117,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	118,	0,	118,	0,	0,	0,	0,	0,	118,	0,	0,	39,	41,	46,	48,	0,	118,	118,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	45,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	0,	0,	0,	0,	52,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	119,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	47,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	0,	0,	0,	0,	52,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	120,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	49,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	0,	0,	0,	0,	52,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	121,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	122,	0,	0,	122,	122,	122,	122,	0,	122,	122,	122,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	123,	0,	0,	123,	123,	123,	123,	0,	123,	123,	123,	0	},
{	0,	0,	0,	0,	0,	0,	53,	38,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	39,	41,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	54,	55,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	124,	124,	124,	124,	124,	0,	0,	0,	124,	0	},
{	0,	0,	0,	0,	0,	0,	56,	38,	43,	0,	0,	0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	51,	0,	0,	0,	39,	41,	46,	48,	52,	0,	0,	44,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	57,	0,	0,	0	},
{	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	125,	0,	125,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},
};
        string [] Rows = {"<P>", "<PO>", "<POp>", "<O>", "<LID>", "<Op>", "<V>", "<F>", "<PV>", "S","F", "d", "B", "X", "W", "D", "I", "T", "E", "f", "i", "o", "C", ";", ",", "=", "+", "-", "/", "%", "(", ")", "c", "*", "$" };
        int   loopCounter;
        Stack <toStack> workStack,outputStack;
        toStack buffer;
        string inputString, outputString, stateLog;
        int GetColByID(string ID)
        {
            if (Rows.Contains(ID))
            {
                for (int i = 0; i < Rows.Length; ++i)
                    if (Rows[i] == ID)
                        return i;
            }
             
            return 0;
        }
        public string LRAnalisys(string Tokens, out string errLog, out long time, out long ticks)
        {
            workStack = new Stack<toStack>();
            outputStack = new Stack<toStack>();
            Stopwatch t = new Stopwatch();
            t.Reset();
            t.Start();
            buffer.sign = "$";
            buffer.state = 1;
            inputString = Tokens +"$";
            workStack.Push(buffer);
            buffer.sign = Convert.ToString(inputString[0]);
            try
            {
                while (workStack.Count > 0)
                {
                    if (LRTable[buffer.state, GetColByID(buffer.sign)] < 100)
                    {
                        shift();
                    }
                    else
                        if (LRTable[buffer.state, GetColByID(buffer.sign)] >= 100)
                        {
                            reduce();
                            continue;
                        }
                    ++loopCounter;
                    buffer.sign = Convert.ToString(inputString[loopCounter]);
                }
            }
            catch (IndexOutOfRangeException) { }
            t.Stop();
            time = t.ElapsedMilliseconds;
            ticks = t.ElapsedTicks;
            errLog = stateLog;
            return outputString;
        }
        void shift()
        {
            stateLog += "M ( " + Convert.ToString(buffer.state) + " , " + buffer.sign + " ) = " + LRTable[buffer.state, GetColByID(buffer.sign)] + "\n";
            buffer.state = LRTable[buffer.state, GetColByID(buffer.sign)];
            workStack.Push(buffer);
        }
        void reduce()
        {
            string buf = getTheRule(LRTable[buffer.state, GetColByID(buffer.sign)]);
            stateLog += "M ( " + Convert.ToString(buffer.state) + " , " + buffer.sign + " ) = " + LRTable[buffer.state, GetColByID(buffer.sign)] + "\n";
            try
            {
                buffer = workStack.Peek();
            }
            catch (InvalidOperationException) { return; }
            buffer.sign = buf;
            loopCounter--;
        }
        string getTheRule(int lex)
        {
            string buf = "";
            switch (lex - 1)
            {
                case 100: outputString += "<P> -> S <PO> <POp> F $";
                    buf = "<P>";
                    popIt(5);
                    break;
                case 101: outputString += "<PO> -> <O> ;";
                    buf = "<PO>";
                    popIt(2);
                    break;
                case 102: outputString += "<PO> -> <O> ; <PO>";
                    buf = "<PO>";
                    popIt(3);
                    break;
                case 103: outputString += "<POp> -> <Op> ;";
                    buf = "<POp>";
                    popIt(2);
                    break;
                case 104:
                    outputString += "<POp> -> <Op> ; <POp>";
                    buf = "<POp>";
                    popIt(3);
                    break;
                case 105:
                    outputString += "<O> -> d <LID>";
                    buf = "<O>";
                    popIt(2);
                    break;
                case 106:
                    outputString += "<O> -> B <LID>";
                    buf = "<O>";
                    popIt(2);
                    break;
                case 107:
                    outputString += "<LID> -> X ";
                    buf = "<LID>";
                    popIt(1);
                    break;
                case 108:
                    outputString += "<LID> -> X , <LID> ";
                    popIt(3);
                    buf = "<LID>";
                    break;
                case 109:
                    outputString += "<Op> -> X = <V>";
                    buf = "<Op>";
                    popIt(3);
                    break;
                case 110:
                    outputString += "<Op> -> W <V> D <POp> F";
                    buf = "<Op>";
                    popIt(5);
                    break;
                case 111:
                    outputString += "<Op> -> I <V> T <POp> E <POp> f";
                    buf = "<Op>";
                    popIt(7);
                    break;
                case 112:
                    outputString += "<Op> -> i X";
                    buf = "<Op>";
                    popIt(2);
                    break;
                case 113:
                    outputString += "<Op> -> o <V>";
                    buf = "<Op>";
                    popIt(2);
                    break;
                case 114:
                    outputString += "<V> -> <F>";
                    buf = "<V>";
                    popIt(1);
                    break;
                case 115:
                    outputString += "<V> -> <V> + <F>";
                    buf = "<V>";
                    popIt(3);
                    break;
                case 116:
                    outputString += "<V> -> <V> - <F>";
                    buf = "<V>";
                    popIt(3);
                    break;
                case 117:
                    outputString += "<F> -> <PV>";
                    buf = "<F>";
                    popIt(1);
                    break;
                case 118:
                    outputString += "<F> -> <F> * <PV>";
                    buf = "<F>";
                    popIt(3);
                    break;
                case 119:
                    outputString += "<F> -> <F> / <PV>";
                    buf = "<F>";
                    popIt(3);
                    break;
                case 120:
                    outputString += "<F> -> <F> % <PV>";
                    buf = "<F>";
                    popIt(3);
                    break;
                case 121:
                    outputString += "<PV> -> X";
                    buf = "<PV>";
                    popIt(1);
                    break;
                case 122:
                    outputString += "<PV> -> C";
                    buf = "<PV>";
                    popIt(1);
                    break;
                case 123:
                    outputString += "<PV> -> ( <V> )";
                    buf = "<PV>";
                    popIt(3);
                    break;
                case 124:
                    outputString += "<PV> -> ( <V> c <V> )";
                    buf = "<PV>";
                    popIt(5);
                    break;
            }
            outputString += "\n";
            return buf;
        }
        void popIt(int count)
        {
            for (int i = 0; i< count;++i)
            {
                outputStack.Push(workStack.Pop());
            }
        }

    }
    


}
